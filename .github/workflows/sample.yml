name: Download package.json files

on:
  workflow_dispatch:
    inputs:
      repo:
        description: "Repo Name"
        required: true

env:
  REPO: ${{ github.event.inputs.repo }}        

jobs:
  download-package-json:
    runs-on: ubuntu-latest

    steps:
      - name: Sparse checkout another repo
        run: |
          git clone --no-checkout https://github.com/Sunilsindur/$REPO remote-repo
          cd remote-repo
          git sparse-checkout init --cone
          echo "*package.json" >> .git/info/sparse-checkout
          echo "*demo.json" >> .git/info/sparse-checkout
          git checkout

      - name: bash script to copy package.json files or demo.json files with there dir name
        run: |
          mkdir -p ../json-files
          find . -type f \( -name "package.json" -o -name "demo.json" \) -exec bash -c 'mkdir -p ../json-files/$(dirname "{}"); cp "{}" ../json-files/$(dirname "{}")' \;

      - name: display directories name and form object
        run: |
          cd ../json-files
          find . -type f \( -name "package.json" -o -name "demo.json" \) | while read file; do
            folder_name=$(basename "$(dirname "$file")")
            echo "Processing file: $file"
            echo "folder_name: $folder_name"
            COMPONENT_NAME=$(basename "$(dirname "$file")")  # Use the directory name as the component name
            SOURCE="GitHub"
            STAGE="DEV"
            MEASURE_NAME="Component Dependencies"
          
            DEPENDENCIES=$(jq '.devDependencies' "$file")
          
            if [ "$DEPENDENCIES" != "null" ]; then
              RESULT_JSON="[]"
          
              for DEP in $(echo "$DEPENDENCIES" | jq -r 'keys[]'); do
                VERSION=$(echo "$DEPENDENCIES" | jq -r --arg dep "$DEP" '.[$dep]')
          
                DEP_JSON=$(jq -n \
                  --arg dep "$DEP" \
                  --arg ver "$VERSION" \
                  '{"dependencyName": $dep, "version": $ver}')
                  
                RESULT_JSON=$(echo "$RESULT_JSON" | jq --argjson dep "$DEP_JSON" '. + [$dep]')
              done
          
              FINAL_JSON=$(jq -n \
                --arg comp "$COMPONENT_NAME" \
                --arg src "$SOURCE" \
                --arg stage "$STAGE" \
                --arg meas "$MEASURE_NAME" \
                --argjson data "$RESULT_JSON" \
                '[{
                  "componentName": $comp,
                  "source": $src,
                  "stage": $stage,
                  "measures": [{
                    "measureName": $meas,
                    "data": $data
                  }]
                }]')
          
              echo "$FINAL_JSON"
            else
              echo "No devDependencies found in $file"
            fi
          
          done
